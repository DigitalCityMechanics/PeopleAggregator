<?php
/** !
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* [filename] is a part of PeopleAggregator.
* [description including history]
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* @author [creator, or "Original Author"]
* @license http://bit.ly/aVWqRV PayAsYouGo License
* @copyright Copyright (c) 2010 Broadband Mechanics
* @package PeopleAggregator
*/
?>
<?php
/**
 * Project:     PeopleAggregator: a social network developement platform
 * File:        ProfileFeedModule.php, BlockModule file to generate UI for feeds added by user in its profile
 * @author:     Tekriti Software (http://www.tekritisoftware.com)
 * Version:     1.1
 * Description: This file contains a class ProfileFeedModule which generates html of 
 *              Members list - it is side module
 * The lastest version of PeopleAggregator can be obtained from:
 * http://peopleaggregator.org
 * For questions, help, comments, discussion, etc. please visit 
 * http://wiki.peopleaggregator.org/index.php
 *
 */
 
// global var $path_prefix has been removed - please, use PA::$path static variable
require_once "api/ExternalFeed/ExternalFeed.php";

class ProfileFeedModule extends Module {
  
  public $module_type = 'user|group|network';
  public $module_placement = 'left|right';
  
  /**
  * $outer_template defines the tpl to be user for this module
  */
  public $outer_template = 'outer_public_side_module.tpl.php';
  
  /**
  * $title defines the title to be displayed for the Module
  */
  public $title;
  
  /**
  * $profile_feeds contains the user profile feed data.
  * default format is array('title', 'description','original_url', 'links', 'feed_id')
  */
  public $profile_feeds;
  
  /**
  * Default constructor for ProfileFeedModule
  * Initializes html_block_id and title for the module
  */  
  function __construct() {
    parent::__construct();
    $this->html_block_id = 'ProfileFeedModule';
    $this->title = __('Blogs');
  }

  public function initializeModule($request_method, $request_data) {
     if(empty($this->shared_data['profile_feeds'])) return 'skip';
     $this->profile_feeds = $this->shared_data['profile_feeds'];
  }
  
  /**
  *  Function : render()
  *  Purpose  : Setting vars required for the tpl and return html generated by generate_inner_html() function
  *  @return   type string 
  *            returns rendered html code 
  */
  function render() {
    // global var $_base_url has been removed - please, use PA::$url static variable
    $links = array();
    if (!empty($this->profile_feeds)) {
      $counter = 0;
      foreach ($this->profile_feeds as $data) {
        $params = array('feed_id'=>@$data['feed_id']);
        $ExternalFeed = new ExternalFeed();
        
        try {
          //Getting the feed data corresponding to the feed id
          $this->profile_feeds[$counter]['links'] = $ExternalFeed->get_feed_data($params);
        } catch(PAException $e) {
          //TODO: pending error handling if function fails.
          //$error = $e->message;
          $this->profile_feeds[$counter]['links'][] = $e->message; // insert error message instead Feed object
        }
        $counter++;
      }
    }
   
    $this->inner_HTML = $this->generate_inner_html();
    $content = parent::render();
    return $content;
  }
  
  /**
  *  Function : generate_inner_html()
  *  Purpose  : Generate html for the ProfileFeedModule
  *  @return   type string 
  *            returns rendered html code 
  */
  function generate_inner_html () {
   
    switch ( $this->mode ) {
      case PRI:
        $this->outer_template = 'outer_private_side_module.tpl';
        $tmp_file = PA::$blockmodule_path .'/'. get_class($this) . '/side_inner_public.tpl';
      break;
      default:
        $tmp_file = PA::$blockmodule_path .'/'. get_class($this) . '/side_inner_public.tpl';
      break;  
    }
    $inner_html_gen = new Template($tmp_file);
    $inner_html_gen->set('profile_feeds', $this->profile_feeds);
    $inner_html = $inner_html_gen->fetch();
    return $inner_html;
  }

}
?>