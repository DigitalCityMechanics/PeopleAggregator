<?php
// Call RolesTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "RolesTest::main");
}

require_once dirname(__FILE__)."/lib/common.php";
require_once "api/Roles/Roles.php";


/**
 * Test class for Roles.
 * Generated by PHPUnit_Util_Skeleton on 2007-04-23 at 06:09:58.
 */
class RolesTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("RolesTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testCreate().
     */
  /*
    public function testCreate() {
        // Remove the following line when you implement this test.
        $roles = new Roles();
        $roles->name = 'Publisher';
        $roles->description = 'publisher is content manager';
        $id = $roles->create();
        //this id should be equal to newly created id
        $res = Dal::query('SELECT max(id) as ID from {admin_roles}');
        $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
        $max_id = $r->ID;
        $this->assertEquals($id , $max_id);      
    }
  
    */
    /**
     * @todo Implement testCreate().
     */
  /*
    public function testCreateWithEmptyName() {
      // Remove the following line when you implement this test.
      //if this gives error then its OK
      $roles = new Roles();
      $code = NULL;
      $roles->description = 'Admin can do most of the things in the Admin capablities';
      try {
        $id = $roles->create();  
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);      
    }
  */
    /**
     * @todo Implement testCreate().
     */
  /* public function testCreateWithEmptyDescription() {
      // Remove the following line when you implement this test.
      //if this gives error then its OK
      $roles = new Roles();
      $code = NULL;
      
      $roles->name = 'Editor';
      try {
        $id = $roles->create();  
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);      
    }

  */
    /**
     * @todo Implement testUpdate().
     */
  /*  
  public function testUpdate() {
        // Remove the following line when you implement this test.
      $id = 1;
      $name = 'New and updated name';
      $description = 'New and updated description';
      $role = new Roles();
      $role->id = $id;
      $role->name =  $name;
      $role->description = $description;
      $role->update();
      //now updated records should be same as the inserted records
      $res = Dal::query('SELECT * FROM {admin_roles} WHERE id = ?', array($id));
      $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
      $nameDB = $r->name;
      $descriptionDB = $r->description;
      $this->assertEquals($nameDB , $name);      
      $this->assertEquals($descriptionDB , $description);      
    }
*/
    /**
     * @todo Implement testUpdate().
     */
  /*
    public function testUpdateWithoutID() {
      //if id is not set then it should throw some error and should not update the 
      //the whole table
      $roles = new Roles();
      $code = NULL;
      try {
         $roles->update();  
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);      
      
    }*/
    /**
     * @todo Implement testGet().
     */
  /*  public function testGet() {
        // Remove the following line when you implement this test.
      $roles = new Roles();
      $id = 1;
      $roles->id = $id;
      $role = $roles->get();
      $res = Dal::query('SELECT * FROM {admin_roles} WHERE id = ?', array($id));
      $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
      $this->assertEquals($r->name , $role->name);
      $this->assertEquals($r->description , $role->description);
    }

    public function testGetWithoutID() {
      //if id is not set then it should throw some error and should not update the 
      //the whole table
      $roles = new Roles();
      $code = NULL;
      try {
         $roles->get();  
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);      
      
    }
  
    public function testGetWithInvalidID() {
      //if id is not valid then it should throw an error
      
      $roles = new Roles();
      $id = 'invalid';
      $roles->id = $id;
      $code = NULL;
      try {
         $roles->get();  
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , INVALID_ID);      
      
    }
*/
    /**
     * @todo Implement testGet_multiple().
     */
    public function testGet_multiple() {
      $roles = Roles::get_multiple();
      $num = count($roles);
      $res = Dal::query('SELECT count(*) AS CNT FROM {admin_roles} ');
      $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
      //if total rows in db are equal to rows returned by the function
      // then test is OK
      $this->assertEquals($num , $r->CNT);      
    
    }

   /**
     * @todo Implement testGet_multiple().
     */
/*    public function testGet_multipleWithCount() {
      $param = array('cnt'=>TRUE);
      $num = Roles::get_multiple($param);
      $res = Dal::query('SELECT count(*) AS CNT FROM {admin_roles} ');
      $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
      //if total rows in db are equal to rows returned by the function
      // then test is OK
      $this->assertEquals($num , $r->CNT);      
    
    }*/

   /**
     * @todo Implement testGet_multiple().
     * need to figure out how to write test case of this
     */
  /* 
    public function testGet_multipleWithPagination() {
      $params = array();
      $params['sort_by'] = 'created';
      $rows_from_api = Roles::get_multiple($params);
      $res = Dal::query('SELECT id FROM {admin_roles} order by created');
      while ($r = $res->fetchRow(DB_FETCHMODE_OBJECT)) {
	
      }
      
      //if total rows in db are equal to rows returned by the function
      // then test is OK
      $this->assertEquals($num , $r->CNT);      
    
    }*/

    /**
     * @todo Implement testAssign_tasks_to_role_single().
     */
    public function testAssign_tasks_to_role() {
      //check for single tasks
      $tasks = 1;
      $role = 1;
      Roles::assign_tasks_to_role($tasks, $role); 
      $res = Dal::query('SELECT count(*) AS CNT FROM {tasks_roles} where task_id = 1 and role_id=1');
      $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
     
      $this->assertEquals(1 , $r->CNT);      
    }

    /**
     * @todo Implement testAssign_tasks_to_role().
     */
   public function testAssign_tasks_to_role_multiple() {
      //check for single tasks
     $tasks = array(1,2,3);$role = 1;
     Roles::assign_tasks_to_role($tasks, $role); 
     $res = Dal::query('SELECT count(*) AS CNT FROM {tasks_roles} where task_id in(1,2,3) and role_id=1');
     $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
     
      $this->assertEquals(3 , $r->CNT);      
    }
    
     /**
     * @todo Implement testAssign_tasks_to_role().
     */
   public function testAssign_tasks_to_role_empty_task() {
      //check for single tasks
     $tasks = NULL;$role = 1;
     $code = NULL;
     try {
	Roles::assign_tasks_to_role($tasks, $role); 
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);   

    }
     /**
     * @todo Implement testAssign_tasks_to_role().
     */
   public function testAssign_tasks_to_role_empty_role() {
      //check for single tasks
     $tasks = 1;$role = NULL;
     $code = NULL;
     try {
	Roles::assign_tasks_to_role($tasks, $role); 
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);   

    }

    /**
     * @todo Implement testAssign_role_to_user().
     */
    public function testAssign_role_to_user() {
      $role_id = 1; $user_id = 1;  
      Roles::assign_role_to_user($role_id, $user_id);
      $res = Dal::query('SELECT count(*) AS CNT FROM {users_adminroles} where user_id = 1 and role_id=1');
      $r = $res->fetchRow(DB_FETCHMODE_OBJECT);
      $this->assertEquals(1 , $r->CNT);      
    }
  /**
     * @todo Implement testAssign_tasks_to_role().
     */
   public function testAssign_role_to_user_empty_role() {
      //check for single tasks
     $user_id = 1;$role_id = NULL;
     $code = NULL;
     try {
	 Roles::assign_role_to_user($role_id, $user_id);
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);   

    }
     /**
     * @todo Implement testAssign_tasks_to_role().
     */
   public function testAssign_role_to_user_empty_user() {
      //check for single tasks
     $role_id = 1;$user_id = NULL;
     $code = NULL;
     try {
	 Roles::assign_role_to_user($role_id, $user_id);
      } catch (PAException $e) {
          $error = $e->message;
          $code = $e->code;
      }
      //this id should be equal to newly created id
      $this->assertEquals($code , REQUIRED_PARAMETERS_MISSING);   

    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }
}

// Call RolesTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "RolesTest::main") {
    RolesTest::main();
}
?>
